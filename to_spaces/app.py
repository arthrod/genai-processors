import asyncio
import os
from typing import Tuple

import numpy as np
import gradio as gr
import google.genai as genai
from google.genai import types as genai_types

DEFAULT_MODEL = "models/music-bison-001"
DEFAULT_RATE = 24000


def _ensure_api_key(key: str | None) -> str:
    """Get API key from input or environment, raising an error if missing."""
    if key:
        os.environ["GOOGLE_API_KEY"] = key
        return key
    env_key = os.environ.get("GOOGLE_API_KEY")
    if not env_key:
        raise gr.Error("Please provide a Google API key.")
    return env_key


async def _generate_async(prompt: str, model: str, api_key: str) -> Tuple[int, np.ndarray]:
    client = genai.Client(api_key=api_key)
    audio = bytearray()
    async with client.aio.live.music.connect(model=model) as session:
        await session.set_weighted_prompts([
            genai_types.WeightedPrompt(text=prompt, weight=1.0)
        ])
        await session.play()
        async for msg in session.receive():
            if msg.server_content and msg.server_content.audio_chunks:
                for chunk in msg.server_content.audio_chunks:
                    audio.extend(chunk.data)
    audio_np = np.frombuffer(bytes(audio), dtype=np.int16).astype(np.float32) / 32768.0
    return DEFAULT_RATE, audio_np


def generate_music(prompt: str, api_key: str, model: str = DEFAULT_MODEL):
    key = _ensure_api_key(api_key)
    return asyncio.run(_generate_async(prompt, model, key))


with gr.Blocks() as demo:
    gr.Markdown("""# Live Music Generator\nEnter a prompt and listen to music generated by Gemini.""")
    prompt = gr.Textbox(label="Prompt", value="A pleasant melody")
    api_key_in = gr.Textbox(label="Google API Key", type="password")
    model_in = gr.Textbox(label="Model", value=DEFAULT_MODEL)
    out = gr.Audio(label="Generated Audio", type="numpy")
    btn = gr.Button("Generate")
    btn.click(generate_music, inputs=[prompt, api_key_in, model_in], outputs=out)

if __name__ == "__main__":
    demo.launch()
